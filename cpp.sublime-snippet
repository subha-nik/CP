<snippet>
	<content><![CDATA[
/* Subhankar Pramanik */

#include<bits/stdc++.h>
using namespace std;

#ifndef ONLINE_JUDGE
#define subha_nik
#define deb(x) 		cerr<<#x<<" "; _print(x); cerr<<endl;
#else
#define deb(x)
#endif

#define fastio()	ios_base::sync_with_stdio(false); cin.tie(NULL);
#define int 		long long
#define endl 		'\n'
#define pf 			push_front
#define ppf 		pop_front
#define pb 			push_back
#define ppb 		pop_back
#define mp 			make_pair
#define ff 			first
#define ss 			second
#define all(x) 		(x).begin(), (x).end()
#define sz(x) 		(int)((x).size())
#define vi 			vector<int>
#define vvi 		vector<vector<int> >
#define vvvi 		vector<vector<vector<int> > >
#define pii 		pair<int, int>
#define vpii 		vector<pair<int, int> >
#define vvpii 		vector<vector<pair<int, int> > >
#define vc 			vector<char>
#define vvc 		vector<vector<char> >
#define vs 			vector<string>
#define uset 		unordered_set
#define umap 		unordered_map
#define pow 		__pow
#define gcd 		__gcd
#define ppc 		__builtin_popcount
#define ppcll 		__builtin_popcountll
#define clz			__builtin_clz
#define clzll		__builtin_clzll

const int32_t MOD = 1e9+7;
const int32_t MOD1 = 998244353;
const long long INF = 1e18;

template<typename T> istream& operator >> (istream& in, vector<T>& v) { for(T& i : v) in>>i; return in; }
template<typename T> ostream& operator << (ostream& out, vector<T>& v) { for(T& i : v) out<<i<<" "; return out; }
template<typename T> void _print(T& x) { cerr<<x; }
template<typename T, typename U> void _print(pair<T, U>& p) { cerr<<"{"; _print(p.ff); cerr<<","; _print(p.ss); cerr<<"}"; }
template<typename T> void _print(vector<T>& v) { cerr<<"[ "; for(T& i : v) { _print(i); cerr<<" "; } cerr<<"]"; }
template<typename T> void _print(set<T>& s) { cerr<<"[ "; for(T& i : s) { _print(i); cerr<<" "; } cerr<<"]"; }
template<typename T> void _print(uset<T>& s) { cerr<<"[ "; for(T& i : s) { _print(i); cerr<<" "; } cerr<<"]"; }
template<typename T, typename U> void _print(map<T, U>& m) { cerr<<"[ "; for(auto& i : m) { _print(i); cerr<<" "; } cerr<<"]"; }
template<typename T, typename U> void _print(umap<T, U>& m) { cerr<<"[ "; for(auto& i : m) { _print(i); cerr<<" "; } cerr<<"]"; }


void test_case() {
	$0
}

int32_t main() {
	#ifdef subha_nik
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
		freopen("error.txt", "w", stderr);
	#endif
	
	#ifdef SIEVE 
		sieve();
	#endif

	#ifdef FACTORIAL 
		factorial();
	#endif
		
		fastio();
	
	int t = 1; 
	cin >> t;
	for (int i = 1; i <= t; i++) {
		// cout << "Case #" << i << ": ";
		test_case();
	}
	
	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>

<snippet>
	<content><![CDATA[
// For range sum query & update
class SegTree {
public:
	vector<int> tree;
	vector<int> lazy;

	SegTree(int n) {
		tree.resize(4*n);
		lazy.resize(4*n);
	}

	void build(vector<int>& a, int v, int tl, int tr) {
		if (tl == tr) {
			tree[v] = a[tl];
		}
		else {
			int tm = (tl + tr) / 2;
			build(a, 2*v, tl, tm);
			build(a, 2*v+1, tm+1, tr);
			tree[v] = tree[2*v] + tree[2*v+1];
		}
		lazy[v] = 0;
	}

	int query(int v, int tl, int tr, int l, int r) {
		if (lazy[v] != 0) {
			tree[v] += (tr - tl + 1) * lazy[v];
			
			if (tl != tr) {
				lazy[2*v] += lazy[v];
				lazy[2*v+1] += lazy[v];
			}
			lazy[v] = 0;
		}

		if (l > r) {
			return 0;
		}
		if (l == tl and r == tr) {
			return tree[v];
		}
		int tm = (tl + tr) / 2;
    	return query(2*v, tl, tm, l, min(r, tm))
        	+ query(2*v+1, tm+1, tr, max(l, tm+1), r);
	}

	void point_update(int v, int tl, int tr, int pos, int new_val) {
		if (lazy[v] != 0) {
			tree[v] += (tr - tl + 1) * lazy[v];
			
			if (tl != tr) {
				lazy[2*v] += lazy[v];
				lazy[2*v+1] += lazy[v];
			}
			lazy[v] = 0;
		}

		if (tl == tr) {
	        tree[v] = new_val;
	    }
	    else {
	        int tm = (tl + tr) / 2;
	        if (pos <= tm)
	            point_update(v*2, tl, tm, pos, new_val);
	        else
	            point_update(v*2+1, tm+1, tr, pos, new_val);
	        tree[v] = tree[v*2] + tree[v*2+1];
	    }
	}

	void range_update(int v, int tl, int tr, int l, int r, int val) {
		if (lazy[v] != 0) {
			tree[v] += (tr - tl + 1) * lazy[v];
			
			if (tl != tr) {
				lazy[2*v] += lazy[v];
				lazy[2*v+1] += lazy[v];
			}
			lazy[v] = 0;
		}

		if (l > r) {
			return;
		}
		if (l == tl and r == tr) {
			tree[v] += (tr - tl + 1) * val;

			if (tl != tr) {
				lazy[2*v] += val;
				lazy[2*v+1] += val;
			}
			return;
		}
		int tm = (tl + tr) / 2;
		range_update(2*v, tl, tm, l, min(r, tm), val);
		range_update(2*v+1, tm+1, tr, max(l, tm+1), r, val);
		tree[v] = tree[2*v] + tree[2*v+1];
	}
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
